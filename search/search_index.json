{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>The Docker Project started in 2013 and became the de facto standard for executing programs in a portable sandbox environment called a \"container.\" It is probably one of the reasons for the high rate of cloud adoption in the industry.</p> <p>One of the predictions of the analyst firm Gartner is that by 2022, 75% of organizations will be running three or more containerized applications in production. So it is high time for organizations to jump on board. Docker changed the IT infrastructure, and everybody uses it. Big cloud providers like Amazon, Microsoft, Google, or any of today's big corporations use Docker.</p> <p>This practical project focuses on running containerized applications with Docker on Ubuntu. The project covers the installation of Docker Engine, understanding Docker Client, running web servers in a Docker container, accessing the shell of a container, and modifying a container.</p> <ol> <li>Installation of Docker Engine on Ubuntu: The project starts with the installation of the Docker Engine on Ubuntu. It covers the installation process, checking the installed version, and configuring Docker to start on boot.</li> <li>Understanding Docker Client: Next, the project explains the Docker client and its role in managing Docker containers. It covers various Docker commands, such as docker run, docker stop, docker ps, and docker logs.</li> <li>Lab: Running Web Servers in a Docker Container: The project includes a lab on running web servers in a Docker container. It explains how to create a Dockerfile, build a Docker image, and run a Docker container. The lab covers using different web server images, such as Apache and Nginx.</li> <li>Getting Shell Access to a Container: The project explains how to access shell of a running container. It covers using the Docker exec command and Docker attach command to access shell of a container.</li> <li>Modifying a Container: The project also covers modifying a running container. It explains how to create a new image from a running container, modify the image, and create a new container from the modified image.</li> </ol> <p>This practical project provides a comprehensive understanding of running containerized applications with Docker on Ubuntu. It covers the installation process, understanding the Docker client, running web servers in a Docker container, accessing the shell of a container, and modifying a container. This project is a must-do for anyone interested in Docker and containerization.</p>"},{"location":"1-installing-docker-engine-on-ubuntu/","title":"Installing Docker Engine on Ubuntu","text":""},{"location":"1-installing-docker-engine-on-ubuntu/#1-prerequisites","title":"1. Prerequisites:","text":"<p>OS requirements: To install Docker Engine, you need the 64-bit version of Ubuntu.</p> <p>Uninstall old versions: Uninstall any older versions before attempting to install a new one.</p> <pre><code>for pkg in docker.io docker-doc docker-compose podman-docker containerd runc; do sudo apt-get remove $pkg; done\n</code></pre> <p>If no older version is present, below is the output:</p> <p></p>"},{"location":"1-installing-docker-engine-on-ubuntu/#2-installation-using-the-apt-repository","title":"2. Installation using the apt repository","text":"<p>Before installing Docker Engine on a new host machine for the first time, you must set up the Docker repository. Afterward, you can install and update Docker from the repository. </p> <ul> <li>Update the\u00a0<code>apt</code>\u00a0package index and install packages to allow\u00a0<code>apt</code>\u00a0to use a repository over HTTPS:</li> </ul> <pre><code>sudo apt-get update\nsudo apt-get install ca-certificates curl gnupg\n</code></pre> <ul> <li>Add Docker\u2019s official GPG key:</li> </ul> <pre><code>sudo install -m 0755 -d /etc/apt/keyrings\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg\nsudo chmod a+r /etc/apt/keyrings/docker.gpg\n</code></pre> <ul> <li>Use the following command to set up the repository:</li> </ul> <pre><code>echo \\\n  \"deb [arch=\"$(dpkg --print-architecture)\" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \\\n  \"$(. /etc/os-release &amp;&amp; echo \"$VERSION_CODENAME\")\" stable\" | \\\n  sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null\n</code></pre>"},{"location":"1-installing-docker-engine-on-ubuntu/#21-install-docker-engine","title":"2.1. Install Docker Engine","text":"<ul> <li>Update the\u00a0<code>apt</code>\u00a0package index to refresh the apt cache:</li> </ul> <pre><code>sudo apt-get update\n</code></pre> <ul> <li>Receiving a GPG error when running\u00a0<code>apt-get update</code>?</li> </ul> <pre><code>sudo chmod a+r /etc/apt/keyrings/docker.gpg\nsudo apt-get update\n</code></pre> <ul> <li>Selecting the docker repository as the default one</li> </ul> <pre><code>apt-cache policy docker-ce\n</code></pre> <ul> <li>Install Docker Engine, containerd, and Docker Compose.</li> </ul> <pre><code>sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n</code></pre> <ul> <li>Check the status of the Docker</li> </ul> <pre><code>sudo systemctl status docker\n</code></pre>"},{"location":"1-installing-docker-engine-on-ubuntu/#3-install-using-the-convenience-script","title":"3. Install using the convenience script","text":"<p>Docker provides a convenience script at https://get.docker.com/ to install Docker into development environments non-interactively. The convenience script isn\u2019t recommended for production environments, but it\u2019s useful for creating a provisioning script tailored to your needs. </p> <ul> <li>You can run the script with the --dry-run option to learn what steps the script will run when invoked:</li> </ul> <pre><code>curl -fsSL https://get.docker.com -o get-docker.sh\nsudo sh ./get-docker.sh --dry-run\n</code></pre> <ul> <li>This example downloads the script from https://get.docker.com/ and runs it to install the latest stable release of Docker on Linux:</li> </ul> <pre><code>curl -fsSL https://get.docker.com -o get-docker.sh\nsudo sh get-docker.sh\n</code></pre> <ul> <li>You have now successfully installed and started Docker Engine. The docker service starts automatically on Debian based distributions. On RPM based distributions, such as CentOS, Fedora, RHEL or SLES, you need to start it manually using the appropriate systemctl or service command. As the message indicates, non-root users can\u2019t run Docker commands by default.</li> </ul>"},{"location":"1-installing-docker-engine-on-ubuntu/#4-manage-docker-as-a-non-root-user","title":"4. Manage Docker as a non-root user","text":"<ul> <li> <p>The Docker daemon binds to a Unix socket, not a TCP port. By default it\u2019s the root user that owns the Unix socket, and other users can only access it using <code>sudo</code>. The Docker daemon always runs as the <code>root</code> user.</p> </li> <li> <p>If you don\u2019t want to preface the docker command with sudo, create a Unix group called docker and add users to it. When the Docker daemon starts, it creates a Unix socket accessible by members of the docker group. On some Linux distributions, the system automatically creates this group when installing Docker Engine using a package manager. In that case, there is no need for you to manually create the group.</p> </li> <li> <p>Create the <code>docker</code> group and add current user <code>muritala</code> to the Docker group to be able to run the docker command.</p> </li> </ul> <pre><code>sudo groupadd docker &amp;&amp; sudo usermod -aG docker $USER\n</code></pre> <ul> <li> <p>Log out and log back in so that your group membership is re-evaluated or restart the virtual machine for changes to take effect.</p> </li> <li> <p>Verify that you can run docker commands without sudo and remove the image from local Docker image repository.</p> </li> </ul> <pre><code> docker run --rm hello-world &amp;&amp; docker rmi hello-world\n</code></pre>"},{"location":"1-installing-docker-engine-on-ubuntu/#5-configure-docker-to-start-on-boot-with-systemd","title":"5. Configure Docker to Start on Boot with <code>systemd</code>","text":"<p>Many modern Linux distributions use <code>systemd</code> to manage which services start when the system boots. On  <code>Debian</code> and <code>Ubuntu,</code> the <code>Docker</code> service starts on boot by default.</p> <ul> <li>To automatically start <code>Docker</code> and <code>containerd</code> on boot for other Linux distributions using systemd, run the following command:</li> </ul> <pre><code> sudo systemctl enable docker.service &amp;&amp; sudo systemctl enable containerd.service\n</code></pre> <ul> <li>Log out and then in for a change to take effect.</li> </ul> <pre><code>exit\n</code></pre> <ul> <li>After logging in, check the docker version to check if the docker client can talk to the docker daemon or server.</li> </ul> <pre><code>docker --version\n</code></pre> <p></p>"},{"location":"1-installing-docker-engine-on-ubuntu/#reference-httpsdocsdockercomengineinstallubuntu","title":"Reference: https://docs.docker.com/engine/install/ubuntu/","text":""},{"location":"2-the-docker-client/","title":"The Docker Client","text":""},{"location":"2-the-docker-client/#1-testing-the-entire-installation","title":"1. Testing the entire installation","text":"<pre><code>docker --version \ndocker version\ndocker info\n</code></pre> <ul> <li>Verify that the Docker Engine installation is successful by running the\u00a0<code>hello-world</code> \u00a0image:</li> </ul> <pre><code>sudo docker run hello-world\n</code></pre>"},{"location":"2-the-docker-client/#2-getting-help","title":"2. Getting help","text":"<pre><code>docker help\n</code></pre> <ul> <li>Getting help on management commands like <code>container</code></li> </ul> <pre><code>docker container help\n</code></pre>"},{"location":"2-the-docker-client/#3-searching-and-pulling-images-from-the-docker-hub","title":"3. Searching and Pulling Images from the Docker hub","text":"<ul> <li>Searching for an image on Docker Hub. Images like <code>debian and mongo</code></li> </ul> <pre><code>docker search debian\ndocker search mongo\n</code></pre> <ul> <li>Pulling an image from the docker hub. Pull images such as <code>redis:5.0.10 , ubuntu:latest, mysql</code></li> </ul> <pre><code>docker image pull redis:5.0.10 \ndocker image pull ubuntu:latest\ndocker image pull mysql        \n</code></pre>"},{"location":"2-the-docker-client/#4-checking-and-listing-local-images","title":"4. Checking and Listing local images","text":"<pre><code>docker images\n</code></pre> <pre><code>docker image ls\n</code></pre>"},{"location":"2-the-docker-client/#5-running-containers","title":"5. Running Containers","text":"<ul> <li>Running a Container such as <code>httpd</code>. If the docker image is unavailable locally, it will be downloaded from Docker Hub.</li> </ul> <pre><code>docker container run -it httpd\n</code></pre> <ul> <li>Detach the container from the screen using <code>Ctrl+P+Q</code></li> <li>List running Docker container</li> </ul> <pre><code>docker container ls\n</code></pre> <ul> <li>Check stopped containers using:</li> </ul> <pre><code>docker ps -a\n</code></pre> <p>or</p> <pre><code>docker container ls -a\n</code></pre> <ul> <li>Make all currently running docker container run <code>always</code> after reboot or stopped using:</li> </ul> <pre><code>docker update --restart always $(docker ps -q)\n</code></pre>"},{"location":"3-lab-running-webservers-in-a-docker-container/","title":"Lab: Running Web Servers in a Docker Container","text":""},{"location":"3-lab-running-webservers-in-a-docker-container/#1-running-web-servers-in-a-docker-container","title":"1. Running Web Servers in a Docker Container","text":"<ul> <li>Running three nginx and one Apache web servers</li> </ul> <pre><code>docker container run -d -p 80:80 --name mysite1 nginx\ndocker container run -d -p 8080:80 --name mysite2 nginx\ndocker container run -d -p 8081:80 --name mysite3 nginx\ndocker container run -d -p 8082:80 --name mysite4 httpd\n</code></pre> <ul> <li>Verify that the web servers, nginx, are running.</li> </ul> <pre><code>docker container ls\n</code></pre> <p>or</p> <pre><code>docker ps\n</code></pre> <p></p> <ul> <li>Enter the <code>ipaddress:port</code> of the server into a web browser to confirm its status.</li> </ul> <p></p> <p></p> <p></p> <p></p>"},{"location":"3-lab-running-webservers-in-a-docker-container/#2-stopping-a-container","title":"2. Stopping a container","text":"<ul> <li>use docker container stop <code>CONTAINER_ID|CONTAINER_NAME.</code> For example, the container_id of a running nginx web server is <code>d75a67d879fc</code>, and the container_name is <code>mysite3</code></li> </ul> <pre><code>docker container stop d75a67d879fc\n</code></pre> <ul> <li>or use the command below to kill a container by name.</li> </ul> <pre><code>docker container stop mysite2\n</code></pre> <ul> <li>stopping multiple containers using the first three characters of the <code>container_id</code></li> </ul> <pre><code>docker container stop d75 553 6be 568\n</code></pre>"},{"location":"3-lab-running-webservers-in-a-docker-container/#3-remove-a-running-container-and-docker-image-from-local","title":"3. Remove a Running Container and Docker Image from Local","text":"<p>Example: removing a container image, <code>nginx</code>, and <code>hello-world</code> with running container_names: <code>mysite1 mysite2 mysite3 mysite4 mysite5 sleepy_curran laughing_mirzakhani interesting_benz clever_kare wonderful_nash flamboyant_fermi magical_heyrovsky</code> requires force <code>-f</code> removing the running containers before the images can be removed.</p> <p></p> <pre><code>docker remove rm mysite1 mysite2 mysite3 mysite4 mysite5 sleepy_curran laughing_mirzakhani interesting_benz clever_kare wonderful_nash flamboyant_fermi magical_heyrovsky -f\ndocker image rm nginx httpd hello-world\n</code></pre>"},{"location":"3-lab-running-webservers-in-a-docker-container/#4-removing-dangling-docker-images","title":"4. Removing Dangling Docker Images","text":"<p>Docker images consist of multiple layers, and dangling images are layers with no relationship to tagged images. Delete dangling images, stopped containers, and networks not used by at least one container. Run the commands below:</p> <pre><code>docker system prune -y\n</code></pre>"},{"location":"4-getting-shell-access-to-a-container/","title":"Getting Shell Access to a Container","text":""},{"location":"4-getting-shell-access-to-a-container/#1-run-a-container","title":"1. Run a Container","text":"<ul> <li> <p>Running a container, <code>rockylinux:9.1</code>, give it the name <code>container001</code>, and use the <code>-i</code> interactive and <code>-t</code> tty options to allocate a terminal with root access to install other programs or make changes.</p> <pre><code>docker container run --name=container001 -it rockylinux:9.1\n</code></pre> <p></p> </li> <li> <p>Install a program <code>nmap</code> and exit without killing the container using <code>Crtl + P + Q</code></p> <pre><code>yum install nmap\n</code></pre> </li> </ul>"},{"location":"4-getting-shell-access-to-a-container/#2-get-a-bash-shell-in-a-running-container","title":"2. Get a Bash Shell in a Running Container","text":"<ul> <li> <p>List actively running containers</p> <pre><code>docker container ls\n</code></pre> <p></p> </li> <li> <p>Gain shell access to the container, <code>container001</code></p> <pre><code>docker container exec -it container001 /bin/bash\n</code></pre> </li> <li> <p>Stop the running container, <code>container001</code>.</p> <pre><code>docker container stop container001\n</code></pre> </li> </ul>"},{"location":"4-getting-shell-access-to-a-container/#3-execute-commands-in-a-container","title":"3. Execute Commands in a Container","text":"<ul> <li> <p>For Linux distribution, bash is the default command. Start a <code>debian</code> in a container with shell access.</p> <pre><code>docker container run -it debian\n</code></pre> <p></p> </li> <li> <p>Run <code>ls</code> command</p> <p></p> </li> <li> <p>View the content of the <code>passwd</code> file.</p> <pre><code>cat /etc/passwd\n</code></pre> <p></p> </li> <li> <p>Find the container IP address.</p> <pre><code>hostname -I\n</code></pre> <p></p> </li> <li> <p>Exit the container</p> <pre><code>exit\n</code></pre> </li> </ul>"},{"location":"4-getting-shell-access-to-a-container/#3-execute-commands-without-getting-shell-access","title":"3. Execute Commands Without Getting Shell Access","text":"<ul> <li> <p>Start the container, <code>sad_bouman</code> by first checking the exited container list using:</p> <pre><code>docker container ls -a\n</code></pre> <p></p> <pre><code>docker container start sad_bouman\n</code></pre> <p></p> </li> <li> <p>Check actively running container(s)</p> <pre><code>docker container ls\n</code></pre> <p></p> </li> <li> <p>Get shell access and exit without killing the container using <code>Crtl + P + Q</code></p> <pre><code>docker container exec -it sad_bouman bash\n</code></pre> <p></p> </li> <li> <p>Execute commands in the container <code>d6c592c8b91b</code> , without getting shell access.</p> <pre><code>docker container exec d6c592c8b91b cat /etc/shadow\n</code></pre> <p></p> </li> <li> <p>Execute the <code>update</code> command.</p> <pre><code>docker container exec d6c apt update\n</code></pre> <p></p> </li> </ul>"},{"location":"4-getting-shell-access-to-a-container/#4-getting-information-about-the-running-containers","title":"4. Getting Information about the Running Containers.","text":"<ul> <li> <p>List all running and stopped containers</p> <pre><code>docker container ls -a\n</code></pre> <p></p> </li> <li> <p>Remove all containers quietly.</p> <pre><code>docker container rm -f $(docker container ls -a -q)\n</code></pre> <p></p> <pre><code>docker container ls -a\n</code></pre> <p></p> </li> <li> <p>Start an <code>nginx</code> server.</p> <pre><code>docker container run -d -p 8080:80 --name=mysite nginx\n</code></pre> <p></p> <p></p> </li> <li> <p>View all running container.</p> <pre><code>docker container ls -a\n</code></pre> <p></p> </li> <li> <p>View the container, <code>mysite</code>, port.</p> <pre><code>docker container port mysite\n</code></pre> <p></p> </li> <li> <p>View container, <code>mysite</code> logs</p> <pre><code>docker container logs mysite\n</code></pre> <p></p> <p></p> </li> <li> <p>View real-time log updates.</p> <pre><code>docker container logs -f mysite\n</code></pre> </li> <li> <p>View all the processes running in a container</p> <pre><code>docker container top mysite\n</code></pre> <p></p> </li> <li> <p>Or use <code>ps</code> command to view the processes.</p> <pre><code>ps -ef | grep nginx\n</code></pre> <p></p> </li> <li> <p>Display Real-time information about running container(s)</p> <pre><code>docker container stats\n</code></pre> <p></p> </li> <li> <p>View detailed information about a container using the <code>inspect</code> command and filter to see specific information, such as the container\u2019s private IP address.</p> <pre><code>docker container inspect mysite | grep -i ipaddress\n</code></pre> <p></p> </li> <li> <p>Ping the private IP address, <code>172.17.0.2</code>.</p> <pre><code>ping 172.17.0.2\n</code></pre> <p></p> </li> </ul>"},{"location":"5-modifying-a-container/","title":"Modifying a Container","text":""},{"location":"5-modifying-a-container/#1-committing-container-changes-into-a-new-image","title":"1. Committing Container Changes into a New Image","text":"<ul> <li> <p>Start a <code>rockylinux</code> container</p> <pre><code>docker container run -it --name=container1 rockylinux:9.1\n</code></pre> </li> <li> <p>Create a new file <code>xyz.txt</code>.</p> <pre><code>touch /root/xyz.txt\n</code></pre> </li> <li> <p>List the root directory to view the newly created file.</p> <pre><code>ls -l /root/\n</code></pre> <p></p> </li> <li> <p>Install <code>nmap</code> scanner</p> <pre><code>yum install nmap\n</code></pre> </li> <li> <p>Use <code>nmap</code> to scan port <code>80</code> on <code>scanme.nmap.org</code></p> <pre><code>nmap -p 80 scanme.nmap.org\n</code></pre> <p></p> </li> <li> <p>Exit the container and view all containers.</p> <pre><code>exit\n</code></pre> <pre><code>docker container ls -a\n</code></pre> <p></p> </li> <li> <p>Start another <code>rockylinux</code> container.</p> <pre><code>docker container run -it --name=container2 rockylinux:9.1\n</code></pre> </li> <li> <p>Check the root folder on <code>container2</code> for files from <code>container1</code>.</p> <pre><code>ls /root/\n</code></pre> <p></p> </li> <li> <p>Check for <code>nmap</code> package from <code>container1</code> on <code>container2</code>.</p> <p></p> </li> <li> <p>Exit <code>container2</code></p> <pre><code>exit\n</code></pre> </li> <li> <p>Start  <code>container1</code></p> <p></p> <pre><code>docker container start container1\n</code></pre> </li> <li> <p>Get shell access, make changes to the container, and then exit.</p> <pre><code>docker container exec -it container1 bash\n</code></pre> </li> <li> <p>Commit the exited container, <code>container1</code>, with container_id <code>304</code></p> <pre><code>docker commit -m nmap-installed -a muritala 304 molanre/my_rockylinux\n</code></pre> <p></p> </li> <li> <p>View image available on the local machine.</p> <pre><code>docker image ls\n</code></pre> <p></p> </li> <li> <p>Start a new container from the saved container image , <code>molanre/my_rockylinux</code>.</p> <pre><code>docker container run -it molanre/my_rockylinux\n</code></pre> <p></p> </li> <li> <p>Check for the previously installed program, <code>nmap</code>, and file, <code>xyz.txt</code>.</p> <pre><code>ls /root/ &amp;&amp; nmap\n</code></pre> <p></p> </li> </ul>"},{"location":"5-modifying-a-container/#2-tagging-and-pushing-custom-images-to-docker-hub","title":"2. Tagging and Pushing Custom Images to Docker Hub","text":"<ul> <li> <p>View all available images on the local machine</p> <pre><code>docker image ls\n</code></pre> <p></p> </li> <li> <p>Tagging docker images to create a custom image. Tagging images like <code>nginx</code> with your repository and custom name, <code>molanre/nginx:custom</code>.</p> <pre><code>docker image tag nginx molanre/nginx:custom &amp;&amp; docker image ls\n</code></pre> <p></p> </li> <li> <p>Adding a new tag, <code>1.0</code>, to the saved image, <code>my_rockylinux</code> and list all images on local machine.</p> <pre><code>docker image tag molanre/my_rockylinux:latest molanre/my_rockylinux:1.0 &amp;&amp; docker image ls\n</code></pre> <p></p> </li> <li> <p>Pushing an image, <code>molanre/my_rockylinux:latest</code> to Docker Hub by creating an account or logging in and run docker push. Logging in to Docker Hub on the terminal with username, <code>molanre</code> and password, <code>**********.</code></p> <pre><code>docker login\n</code></pre> <p></p> <pre><code>docker image push molanre/my_rockylinux:latest\n</code></pre> <p></p> <p></p> </li> </ul>"}]}